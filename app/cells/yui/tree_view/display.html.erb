
<% yui 'treeview', 'utilities' do -%>
  buildTree();
<% end -%>

<%= javascript_include_tag YUI::Configuration.build_url + "/yuiloader/yuiloader.js" %>

<script type="text/javascript">
  // Apotomo code: ---------------------------------------------------------
  // TODO: move creating to separate class (e.g. Apotomo.TreeView).
  function loadNodeData(node, fnLoadComplete)  {
      var nodeLabel = encodeURI(node.label);

      //prepare URL for XHR request:
      var sUrl = "<%= url_for(address_to_event({:state => :load, :escape => false}, :data)) %>&query=" + nodeLabel;

      //prepare our callback object
      var callback = {

          //if our XHR call is successful, we want to make use
          //of the returned data and create child nodes.
          success: function(oResponse) {
              YAHOO.log("XHR transaction was successful.", "info", "example");
              //YAHOO.log(oResponse.responseText);
              var oResults = eval("(" + oResponse.responseText + ")");
              if((oResults.ResultSet.Result) && (oResults.ResultSet.Result.length)) {
                  //Result is an array if more than one result, string otherwise
                  if(YAHOO.lang.isArray(oResults.ResultSet.Result)) {
                      for (var i=0, j=oResults.ResultSet.Result.length; i<j; i++) {
                          var tempNode = new YAHOO.widget.TextNode(oResults.ResultSet.Result[i], node, false);
                      }
                  } else {
                      //there is only one result; comes as string:
                      var tempNode = new YAHOO.widget.TextNode(oResults.ResultSet.Result, node, false)
                  }
              }

              //When we're done creating child nodes, we execute the node's
              //loadComplete callback method which comes in via the argument
              //in the response object (we could also access it at node.loadComplete,
              //if necessary):
              oResponse.argument.fnLoadComplete();
          },

          //if our XHR call is not successful, we want to
          //fire the TreeView callback and let the Tree
          //proceed with its business.
          failure: function(oResponse) {
              YAHOO.log("Failed to process XHR transaction.", "info", "example");
              oResponse.argument.fnLoadComplete();
          },

          //our handlers for the XHR response will need the same
          //argument information we got to loadNodeData, so
          //we'll pass those along:
          argument: {
              "node": node,
              "fnLoadComplete": fnLoadComplete
          },

          //timeout -- if more than 7 seconds go by, we'll abort
          //the transaction and assume there are no children:
          timeout: 7000
      };

      //With our callback object ready, it's now time to
      //make our XHR call using Connection Manager's
      //asyncRequest method:
      YAHOO.util.Connect.asyncRequest('GET', sUrl, callback);
  }

  function buildTree() {
      //create a new tree:
      tree = new YAHOO.widget.TreeView("treeDiv1");

      //turn dynamic loading on for entire tree:
      tree.setDynamicLoad(loadNodeData);

      //get root node for tree:
      var root = tree.getRoot();

      //add child nodes for tree; our top level nodes are
      //all the states in India:
      var aStates = <%= @root_items.to_json %>;

      for (var i=0, j=aStates.length; i<j; i++) {
          var tempNode = new YAHOO.widget.TextNode(aStates[i], root, false);
      }

      tree.draw();
  }
</script>


<div class="yui-skin-sam">

<div id="treeDiv1"></div>
</div>
